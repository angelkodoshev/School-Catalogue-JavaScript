class School{
 constructor(name,level,numStudents){
   this._name=name;
   this._level=level;
   this._numStudents=numStudents;
 }
  get name(){
    return this._name;
  }
  get level(){
    return this._level;
  }
  get numStudents(){
    return this._numStudents;
  }
  
  set numStudents(value){
    if(value.isNaN()){
      console.log('Invalid input: numberOfStudents must be set to a Number.');
      
    }
    else{
      this._numStudents=value;
    }
  }
  
  quickFacts(){
    console.log(`${this.name} educates ${this.numStudents} students at the ${this.level} school level.`);
  }
  
  
  static pickSubstituteTeacher(substituteTeachers){
    const randInx=Math.floor(substituteTeachers.length * Math.random());
    return substituteTeachers[randInx];
  }
  
}
class PrimarySchool extends School{
  constructor(name,numStudents,pickupPolicy){
    super(name,'primary',numStudents)
    this._pickupPolicy=pickupPolicy;
  }
  get pickupPolicy(){
    return this._pickupPolicy;
  }
}
class HighSchool extends School{
  constructor(name,numStudents,sportsTeams){
 super(name,'high',numStudents);
    this._sportsTeams=sportsTeams
}
  get sportsTeams(){
    return this._sportsTeams;
  }
}

const lorraineHansbury=new PrimarySchool('Lorraine Hansbury',514,'Students must be picked up by a parent, guardian, or a family member over the age of 13.');

lorraineHansbury.quickFacts();
const sub=School.pickSubstituteTeacher(['Jamal Crawford', 'Lou Williams', 'J. R. Smith', 'James Harden', 'Jason Terry', 'Manu Ginobli']);
console.log(sub);

const alSmith=new HighSchool('Al E. Smith',415,['Baseball', 'Basketball', 'Volleyball', 'Track and Field']);
alSmith.quickFacts();
console.log(alSmith.sportsTeams); 
